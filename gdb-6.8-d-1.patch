<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>/downloads/gdb6.8/gdb-6.8-d-1.patch - gdb-patches - dsource.org</title>
 <meta name="description" content="Open Source Development for the D Programming Language">
 <meta name="keywords" content="dsource, d programming, d programming language, subversion, trac">
 <link rel="start" href="/projects/gdb-patches/wiki" /><link rel="search" href="/projects/gdb-patches/search" /><link rel="help" href="/projects/gdb-patches/wiki/TracGuide" /><link rel="stylesheet" href="/projects/gdb-patches/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/projects/gdb-patches/chrome/common/css/dsource.css" type="text/css" /><link rel="stylesheet" href="/projects/gdb-patches/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/projects/gdb-patches/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/projects/gdb-patches/chrome/common/css/browser.css" type="text/css" /><link rel="stylesheet" href="/projects/gdb-patches/pygments/trac.css" /><link rel="icon" href="/projects/gdb-patches/chrome/common/dsource.ico" type="image/x-icon" /><link rel="shortcut icon" href="/projects/gdb-patches/chrome/common/dsource.ico" type="image/x-icon" /><link rel="up" href="/projects/gdb-patches/browser/downloads/gdb6.8" title="Parent directory" /><link rel="alternate" href="/projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch?format=txt" title="Plain Text" type="text/plain" /><link rel="alternate" href="/projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch?format=raw" title="Original Format" type="text/x-diff; charset=iso-8859-15" />
 <style type="text/css">
</style>
 <script type="text/javascript" src="/projects/gdb-patches/chrome/common/js/trac.js"></script>
 <script type="text/javascript" src="/projects/gdb-patches/chrome/common/js/dsource.js"></script>
</head>
<body onload="initNav();">


<div id="container">
 
 <div id="siteheader">
  <div id="left">
   <div id="logo"><img src="/chrome/dsource/img/dsource-logo.gif" /></div>
   <div id="title">dsource.org</div>
   <div id="tag">Open Source Development for<br />
                  the D Programming Language</div>
  </div>
 
  <div id="right">
   <ul>
    <li><a href="/">Home</a></li>
    <li><a id="current" href="/projects/">Projects</a></li>
    <li><a href="/forums/"><span>Forums</span></a></li>
    <li><a href="/projects/tutorials/wiki"><span>Tutorials</span></a></li>
    <li><a href="/site/"><span>Site</span></a></li>
   </ul>
  </div>
 </div>
 
 <div id="mainpage">
 
  <div id="banner">


<div id="header"><h1><a href="http://www.dsource.org/">gdb-patches</a></h1></div>

  </div>



  <div id="nav_all">
   <div id="mainnav" class="nav"><ul><li class="first"><a accesskey="1" href="/projects/gdb-patches/wiki">Wiki</a></li><li><a accesskey="2" href="/projects/gdb-patches/timeline">Timeline</a></li><li><a accesskey="3" href="/projects/gdb-patches/roadmap">Roadmap</a></li><li class="active"><a href="/projects/gdb-patches/browser">Browse Source</a></li><li><a href="/projects/gdb-patches/report">View Tickets</a></li><li class="last"><a accesskey="4" href="/projects/gdb-patches/search">Search</a></li></ul></div>
   <div id="metanav" class="nav"><ul><li class="first"><a href="/forums/login.php?redirect=../projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch">Login</a></li><li><a accesskey="6" href="/projects/gdb-patches/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/projects/gdb-patches/about">About Trac</a></li></ul></div>
   <div id="searchnav">
   <form id="search" action="/projects/gdb-patches/search" method="get">
    <div>
     <label for="proj-search">Search:</label>
     <input type="text" id="proj-search" name="q" size="10" accesskey="f" value="" />
     <input type="submit" value="Search" />
     <input type="hidden" name="wiki" value="on" />
     <input type="hidden" name="changeset" value="on" />
     <input type="hidden" name="ticket" value="on" />
    </div>
   </form>
   </div>
  </div>

  <div id="main">




<div id="ctxtnav" class="nav">
 <ul>
  <li class="first"><a href="/projects/gdb-patches/changeset/24/downloads/gdb6.8/gdb-6.8-d-1.patch">
   Last Change</a></li>
  <li class="last"><a href="/projects/gdb-patches/log/downloads/gdb6.8/gdb-6.8-d-1.patch">
   Revision Log</a></li>
 </ul>
</div>


<div id="searchable">
<div id="content" class="browser">
 <h1><a class="first" title="Go to root directory" href="/projects/gdb-patches/browser">root</a><span class="sep">/</span><a title="View downloads" href="/projects/gdb-patches/browser/downloads">downloads</a><span class="sep">/</span><a title="View gdb6.8" href="/projects/gdb-patches/browser/downloads/gdb6.8">gdb6.8</a><span class="sep">/</span><a title="View gdb-6.8-d-1.patch" href="/projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch">gdb-6.8-d-1.patch</a></h1>

 <div id="jumprev">
  <form action="" method="get">
   <div>
    <label for="rev">View revision:</label>
    <input type="text" id="rev" name="rev" value="" size="4" />
   </div>
  </form>
 </div>

 

 
  <table id="info" summary="Revision info"><tr>
    <th scope="col">
     Revision <a href="/projects/gdb-patches/changeset/24">24</a>, 17.9 kB
     (checked in by Mihail Zenkov, 4 months ago)
    </th></tr><tr>
    <td class="message"><p>
gdb-6.8-d-1 <br />
</p>
</td>
   </tr>
  </table>
  <div id="preview">


<div class="diff"><ul class="entries"><li class="entry">
  <h2>gdb-6.8/gdb/c-lang.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>25</th><th>25</th><td class="l"><span>#include &#34;parser-defs.h&#34;</span>&nbsp;</td></tr><tr><th>26</th><th>26</th><td class="l"><span>#include &#34;language.h&#34;</span>&nbsp;</td></tr><tr><th>27</th><th>27</th><td class="l"><span>#include &#34;c-lang.h&#34;</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>28</th><td class="r"><ins>#include &#34;d-lang.h&#34;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>28</th><th>29</th><td class="l"><span>#include &#34;valprint.h&#34;</span>&nbsp;</td></tr><tr><th>29</th><th>30</th><td class="l"><span>#include &#34;macroscope.h&#34;</span>&nbsp;</td></tr><tr><th>30</th><th>31</th><td class="l"><span>#include &#34;gdb_assert.h&#34;</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>618</th><th>619</th><td class="l"><span>&nbsp; LANG_MAGIC</span>&nbsp;</td></tr><tr><th>619</th><th>620</th><td class="l"><span>};</span>&nbsp;</td></tr><tr><th>620</th><th>621</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>622</th><td class="r"><ins>const struct language_defn d_language_defn =</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>623</th><td class="r"><ins>{</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>624</th><td class="r"><ins>&nbsp; &#34;d&#34;,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Language name */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>625</th><td class="r"><ins>&nbsp; language_d,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>626</th><td class="r"><ins>&nbsp; range_check_off,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>627</th><td class="r"><ins>&nbsp; type_check_off,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>628</th><td class="r"><ins>&nbsp; case_sensitive_on,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>629</th><td class="r"><ins>&nbsp; array_row_major,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>630</th><td class="r"><ins>&nbsp; &amp;exp_descriptor_standard,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>631</th><td class="r"><ins>&nbsp; c_preprocess_and_parse,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>632</th><td class="r"><ins>&nbsp; c_error,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>633</th><td class="r"><ins>&nbsp; null_post_parser,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>634</th><td class="r"><ins>&nbsp; c_printchar,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Print a character constant */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>635</th><td class="r"><ins>&nbsp; c_printstr,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Function to print string constant */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>636</th><td class="r"><ins>&nbsp; c_emit_char,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Print a single char */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>637</th><td class="r"><ins>&nbsp; c_print_type,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Print a type using appropriate syntax */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>638</th><td class="r"><ins>&nbsp; c_val_print,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Print a value using appropriate syntax */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>639</th><td class="r"><ins>&nbsp; c_value_print,&nbsp; &nbsp; &nbsp; &nbsp; /* Print a top-level value */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>640</th><td class="r"><ins>&nbsp; NULL,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Language specific skip_trampoline */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>641</th><td class="r"><ins>&nbsp; NULL,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* value_of_this */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>642</th><td class="r"><ins>&nbsp; basic_lookup_symbol_nonlocal, /* lookup_symbol_nonlocal */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>643</th><td class="r"><ins>&nbsp; basic_lookup_transparent_type,/* lookup_transparent_type */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>644</th><td class="r"><ins>&nbsp; d_demangle,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Language specific symbol demangler */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>645</th><td class="r"><ins>&nbsp; NULL,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Language specific class_name_from_physname */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>646</th><td class="r"><ins>&nbsp; c_op_print_tab,&nbsp; &nbsp; &nbsp; &nbsp;/* expression operators for printing */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>647</th><td class="r"><ins>&nbsp; 1,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* c-style arrays */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>648</th><td class="r"><ins>&nbsp; 0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* String lower bound */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>649</th><td class="r"><ins>&nbsp; default_word_break_characters,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>650</th><td class="r"><ins>&nbsp; default_make_symbol_completion_list,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>651</th><td class="r"><ins>&nbsp; c_language_arch_info,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>652</th><td class="r"><ins>&nbsp; default_print_array_index,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>653</th><td class="r"><ins>&nbsp; default_pass_by_reference,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>654</th><td class="r"><ins>&nbsp; LANG_MAGIC</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>655</th><td class="r"><ins>};</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>656</th><td class="r"><ins></ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>657</th><td class="r"><ins></ins>&nbsp;</td></tr></tbody><tbody><tr><th>621</th><th>658</th><td class="l"><span>void</span>&nbsp;</td></tr><tr><th>622</th><th>659</th><td class="l"><span>_initialize_c_language (void)</span>&nbsp;</td></tr><tr><th>623</th><th>660</th><td class="l"><span>{</span>&nbsp;</td></tr><tr><th>624</th><th>661</th><td class="l"><span>&nbsp; add_language (&amp;c_language_defn);</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>662</th><td class="r"><ins>&nbsp; add_language (&amp;d_language_defn);</ins>&nbsp;</td></tr></tbody><tbody><tr><th>625</th><th>663</th><td class="l"><span>&nbsp; add_language (&amp;cplus_language_defn);</span>&nbsp;</td></tr><tr><th>626</th><th>664</th><td class="l"><span>&nbsp; add_language (&amp;asm_language_defn);</span>&nbsp;</td></tr><tr><th>627</th><th>665</th><td class="l"><span>&nbsp; add_language (&amp;minimal_language_defn);</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/defs.h</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>174</th><th>174</th><td class="l"><span>&nbsp; &nbsp; language_auto,&nbsp; &nbsp; &nbsp; /* Placeholder for automatic setting */</span>&nbsp;</td></tr><tr><th>175</th><th>175</th><td class="l"><span>&nbsp; &nbsp; language_c,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* C */</span>&nbsp;</td></tr><tr><th>176</th><th>176</th><td class="l"><span>&nbsp; &nbsp; language_cplus,&nbsp; &nbsp; &nbsp;/* C++ */</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>177</th><td class="r"><ins>&nbsp; &nbsp; language_d,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* D */</ins>&nbsp;</td></tr></tbody><tbody><tr><th>177</th><th>178</th><td class="l"><span>&nbsp; &nbsp; language_objc,&nbsp; &nbsp; &nbsp; /* Objective-C */</span>&nbsp;</td></tr><tr><th>178</th><th>179</th><td class="l"><span>&nbsp; &nbsp; language_java,&nbsp; &nbsp; &nbsp; /* Java */</span>&nbsp;</td></tr><tr><th>179</th><th>180</th><td class="l"><span>&nbsp; &nbsp; language_fortran,&nbsp; &nbsp; &nbsp; &nbsp;/* Fortran */</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/d-lang.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody class="add"><tr class="first"><th>&nbsp;</th><th>1</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2</th><td class="r"><ins>/* C language support routines for GDB, the GNU debugger.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>3</th><td class="r"><ins>&nbsp; &nbsp;Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002, 2003, 2004</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4</th><td class="r"><ins>&nbsp; &nbsp;Free Software Foundation, Inc.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>5</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>6</th><td class="r"><ins>&nbsp; &nbsp;This file is part of GDB.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>7</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>8</th><td class="r"><ins>&nbsp; &nbsp;This program is free software; you can redistribute it and/or modify</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>9</th><td class="r"><ins>&nbsp; &nbsp;it under the terms of the GNU General Public License as published by</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>10</th><td class="r"><ins>&nbsp; &nbsp;the Free Software Foundation; either version 2 of the License, or</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>11</th><td class="r"><ins>&nbsp; &nbsp;(at your option) any later version.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>12</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>13</th><td class="r"><ins>&nbsp; &nbsp;This program is distributed in the hope that it will be useful,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>14</th><td class="r"><ins>&nbsp; &nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>15</th><td class="r"><ins>&nbsp; &nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp; See the</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>16</th><td class="r"><ins>&nbsp; &nbsp;GNU General Public License for more details.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>17</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>18</th><td class="r"><ins>&nbsp; &nbsp;You should have received a copy of the GNU General Public License</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>19</th><td class="r"><ins>&nbsp; &nbsp;along with this program; if not, write to the Free Software</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>20</th><td class="r"><ins>&nbsp; &nbsp;Foundation, Inc., 59 Temple Place - Suite 330,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>21</th><td class="r"><ins>&nbsp; &nbsp;Boston, MA 02111-1307, USA.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>22</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>23</th><td class="r"><ins>#include &#34;defs.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>24</th><td class="r"><ins>#include &#34;symtab.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>25</th><td class="r"><ins>#include &#34;language.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>26</th><td class="r"><ins>#include &#34;d-lang.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>27</th><td class="r"><ins>#include &#34;c-lang.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>28</th><td class="r"><ins>#include &#34;gdb_string.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>29</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>30</th><td class="r"><ins>#include &lt;ctype.h&gt;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>31</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>32</th><td class="r"><ins>typedef struct {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>33</th><td class="r"><ins>&nbsp; size_t len;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>34</th><td class="r"><ins>&nbsp; char* str;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>35</th><td class="r"><ins>&nbsp; char* pos;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>36</th><td class="r"><ins>} String;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>37</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>38</th><td class="r"><ins>static size_t str_left(String* str) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>39</th><td class="r"><ins>&nbsp; return (str-&gt;len - (str-&gt;pos - str-&gt;str));</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>40</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>41</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>42</th><td class="r"><ins>static void str_resize(String* str, size_t new_size) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>43</th><td class="r"><ins>&nbsp; int pos = str-&gt;pos - str-&gt;str;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>44</th><td class="r"><ins>&nbsp; if (new_size == 0)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>45</th><td class="r"><ins>&nbsp; &nbsp; new_size = strlen(str-&gt;str) + 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>46</th><td class="r"><ins>&nbsp; str-&gt;str = xrealloc(str-&gt;str, new_size);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>47</th><td class="r"><ins>&nbsp; str-&gt;len = new_size;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>48</th><td class="r"><ins>&nbsp; str-&gt;pos = str-&gt;str + pos;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>49</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>50</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>51</th><td class="r"><ins>static void append_len(String* str, char* src, size_t i) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>52</th><td class="r"><ins>&nbsp; size_t amnt = str_left(str);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>53</th><td class="r"><ins>&nbsp; if (i &gt; amnt) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>54</th><td class="r"><ins>&nbsp; &nbsp; str_resize(str, str-&gt;len + i + 20);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>55</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>56</th><td class="r"><ins>&nbsp; memcpy(str-&gt;pos, src, i);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>57</th><td class="r"><ins>&nbsp; str-&gt;pos += i;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>58</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>59</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>60</th><td class="r"><ins>static void append(String* str, char* src) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>61</th><td class="r"><ins>&nbsp; append_len(str, src, strlen(src));</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>62</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>63</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>64</th><td class="r"><ins>static int extractidentifiers(String* output, String* mangled) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>65</th><td class="r"><ins>&nbsp; long i = 0;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>66</th><td class="r"><ins>&nbsp; while (isdigit(*mangled-&gt;pos)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>67</th><td class="r"><ins>&nbsp; &nbsp; i = strtol(mangled-&gt;pos, &amp;mangled-&gt;pos, 10);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>68</th><td class="r"><ins>&nbsp; &nbsp; if (i == 0 || i == LONG_MAX || i == LONG_MIN) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>69</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>70</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>71</th><td class="r"><ins>&nbsp; &nbsp; if (strlen(mangled-&gt;pos) &lt; i)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>72</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>73</th><td class="r"><ins>&nbsp; &nbsp; append_len(output, mangled-&gt;pos, i);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>74</th><td class="r"><ins>&nbsp; &nbsp; mangled-&gt;pos += i;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>75</th><td class="r"><ins>&nbsp; &nbsp; append(output, &#34;.&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>76</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>77</th><td class="r"><ins>&nbsp; if (*mangled-&gt;pos == '\0' || i == 0)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>78</th><td class="r"><ins>&nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>79</th><td class="r"><ins>&nbsp; output-&gt;pos--;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>80</th><td class="r"><ins>&nbsp; return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>81</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>82</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>83</th><td class="r"><ins>static int extracttypeinfo(String* dest, String* id) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>84</th><td class="r"><ins>&nbsp; if (*id-&gt;pos == '\0')</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>85</th><td class="r"><ins>&nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>86</th><td class="r"><ins>&nbsp; // Extract the type info:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>87</th><td class="r"><ins>&nbsp; switch (*id-&gt;pos++) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>88</th><td class="r"><ins>&nbsp; &nbsp; // array, static array, dynamic array:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>89</th><td class="r"><ins>&nbsp; case 'A': case 'G': case 'H':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>90</th><td class="r"><ins>&nbsp; &nbsp; if (extracttypeinfo(dest, id) == -1)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>91</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>92</th><td class="r"><ins>&nbsp; &nbsp; append(dest, &#34;[]&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>93</th><td class="r"><ins>&nbsp; &nbsp; return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>94</th><td class="r"><ins>&nbsp; &nbsp; // pointer:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>95</th><td class="r"><ins>&nbsp; case 'P':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>96</th><td class="r"><ins>&nbsp; &nbsp; if (extracttypeinfo(dest, id) == -1)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>97</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>98</th><td class="r"><ins>&nbsp; &nbsp; append(dest, &#34;*&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>99</th><td class="r"><ins>&nbsp; &nbsp; return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>100</th><td class="r"><ins>&nbsp; &nbsp; // reference:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>101</th><td class="r"><ins>&nbsp; case 'R':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>102</th><td class="r"><ins>&nbsp; &nbsp; if (extracttypeinfo(dest, id) == -1)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>103</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return -1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>104</th><td class="r"><ins>&nbsp; &nbsp; append(dest, &#34;&amp;&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>105</th><td class="r"><ins>&nbsp; &nbsp; return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>106</th><td class="r"><ins>&nbsp; &nbsp; // return value:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>107</th><td class="r"><ins>&nbsp; case 'Z':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>108</th><td class="r"><ins>&nbsp; &nbsp; return extracttypeinfo(dest, id);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>109</th><td class="r"><ins>&nbsp; &nbsp; // out:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>110</th><td class="r"><ins>&nbsp; case 'J':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>111</th><td class="r"><ins>&nbsp; &nbsp; append(dest, &#34;out &#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>112</th><td class="r"><ins>&nbsp; &nbsp; return extracttypeinfo(dest, id);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>113</th><td class="r"><ins>&nbsp; &nbsp; // inout:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>114</th><td class="r"><ins>&nbsp; case 'K':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>115</th><td class="r"><ins>&nbsp; &nbsp; append(dest, &#34;inout &#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>116</th><td class="r"><ins>&nbsp; &nbsp; return extracttypeinfo(dest, id);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>117</th><td class="r"><ins>&nbsp; &nbsp; </ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>118</th><td class="r"><ins>&nbsp; &nbsp; // enum:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>119</th><td class="r"><ins>&nbsp; case 'E': case 'T': case 'D': case 'C': case 'S': case 'I':</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>120</th><td class="r"><ins>&nbsp; &nbsp; return extractidentifiers(dest, id);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>121</th><td class="r"><ins>&nbsp; &nbsp; </ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>122</th><td class="r"><ins>&nbsp; &nbsp; // basic types:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>123</th><td class="r"><ins>&nbsp; case 'n': append(dest, &#34;none&#34;); return 1;&nbsp; // ever used?</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>124</th><td class="r"><ins>&nbsp; case 'v': append(dest, &#34;void&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>125</th><td class="r"><ins>&nbsp; case 'g': append(dest, &#34;byte&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>126</th><td class="r"><ins>&nbsp; case 'h': append(dest, &#34;ubyte&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>127</th><td class="r"><ins>&nbsp; case 's': append(dest, &#34;short&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>128</th><td class="r"><ins>&nbsp; case 't': append(dest, &#34;ushort&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>129</th><td class="r"><ins>&nbsp; case 'i': append(dest, &#34;int&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>130</th><td class="r"><ins>&nbsp; case 'k': append(dest, &#34;uint&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>131</th><td class="r"><ins>&nbsp; case 'l': append(dest, &#34;long&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>132</th><td class="r"><ins>&nbsp; case 'm': append(dest, &#34;ulong&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>133</th><td class="r"><ins>&nbsp; case 'f': append(dest, &#34;float&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>134</th><td class="r"><ins>&nbsp; case 'd': append(dest, &#34;double&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>135</th><td class="r"><ins>&nbsp; case 'e': append(dest, &#34;real&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>136</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>137</th><td class="r"><ins>&nbsp; // imaginary and complex:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>138</th><td class="r"><ins>&nbsp; case 'o': append(dest, &#34;ifloat&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>139</th><td class="r"><ins>&nbsp; case 'p': append(dest, &#34;idouble&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>140</th><td class="r"><ins>&nbsp; case 'j': append(dest, &#34;ireal&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>141</th><td class="r"><ins>&nbsp; case 'q': append(dest, &#34;cfloat&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>142</th><td class="r"><ins>&nbsp; case 'r': append(dest, &#34;cdouble&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>143</th><td class="r"><ins>&nbsp; case 'c': append(dest, &#34;creal&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>144</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>145</th><td class="r"><ins>&nbsp; // other types:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>146</th><td class="r"><ins>&nbsp; case 'b': append(dest, &#34;bit&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>147</th><td class="r"><ins>&nbsp; case 'a': append(dest, &#34;char&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>148</th><td class="r"><ins>&nbsp; case 'u': append(dest, &#34;wchar&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>149</th><td class="r"><ins>&nbsp; case 'w': append(dest, &#34;dchar&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>150</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>151</th><td class="r"><ins>&nbsp; // typeinfo, error, instance:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>152</th><td class="r"><ins>&nbsp; case '@': return extractidentifiers(dest, id); // BUG: is this right?</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>153</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>154</th><td class="r"><ins>&nbsp; default: append(dest, &#34;unknown&#34;); return 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>155</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>156</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>157</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>158</th><td class="r"><ins>char* d_demangle(const char* symbol_, int options) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>159</th><td class="r"><ins>&nbsp; String output;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>160</th><td class="r"><ins>&nbsp; String mangled;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>161</th><td class="r"><ins>&nbsp; unsigned char isFunc = 0;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>162</th><td class="r"><ins>&nbsp; char* symbol;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>163</th><td class="r"><ins>&nbsp; //printf(&#34;%s: &#34;, symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>164</th><td class="r"><ins>&nbsp; if (symbol_ == NULL) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>165</th><td class="r"><ins>&nbsp; &nbsp; //printf(&#34;NULL1\n&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>166</th><td class="r"><ins>&nbsp; &nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>167</th><td class="r"><ins>&nbsp; } else if (strcmp(symbol_, &#34;_Dmain&#34;) == 0) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>168</th><td class="r"><ins>&nbsp; &nbsp; return strdup(&#34;D main&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>169</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>170</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>171</th><td class="r"><ins>&nbsp; symbol = xstrdup(symbol_);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>172</th><td class="r"><ins>&nbsp; mangled.len = strlen(symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>173</th><td class="r"><ins>&nbsp; mangled.str = symbol;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>174</th><td class="r"><ins>&nbsp; mangled.pos = symbol;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>175</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>176</th><td class="r"><ins>&nbsp; output.len = 2;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>177</th><td class="r"><ins>&nbsp; output.str = xmalloc(output.len);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>178</th><td class="r"><ins>&nbsp; output.pos = output.str;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>179</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>180</th><td class="r"><ins>&nbsp; if (symbol == strstr(symbol, &#34;_D&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>181</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 2;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>182</th><td class="r"><ins>&nbsp; &nbsp; isFunc = 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>183</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__Class_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>184</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 8;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>185</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__init_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>186</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 7;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>187</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__vtbl_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>188</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 7;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>189</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__modctor_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>190</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 10;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>191</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__moddtor_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>192</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 10;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>193</th><td class="r"><ins>&nbsp; } else if (symbol == strstr(symbol, &#34;__ModuleInfo_&#34;)) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>194</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos += 13;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>195</th><td class="r"><ins>&nbsp; } else {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>196</th><td class="r"><ins>&nbsp; &nbsp; xfree(output.str);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>197</th><td class="r"><ins>&nbsp; &nbsp; xfree(symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>198</th><td class="r"><ins>&nbsp; &nbsp; //printf(&#34;NULL2\n&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>199</th><td class="r"><ins>&nbsp; &nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>200</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>201</th><td class="r"><ins>&nbsp; </ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>202</th><td class="r"><ins>&nbsp; </ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>203</th><td class="r"><ins>&nbsp; if (extractidentifiers(&amp;output, &amp;mangled) &lt; 0) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>204</th><td class="r"><ins>&nbsp; &nbsp; xfree(output.str);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>205</th><td class="r"><ins>&nbsp; &nbsp; xfree(symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>206</th><td class="r"><ins>&nbsp; &nbsp; //printf(&#34;NULL3\n&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>207</th><td class="r"><ins>&nbsp; &nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>208</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>209</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>210</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>211</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>212</th><td class="r"><ins>&nbsp; append(&amp;output, &#34;(&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>213</th><td class="r"><ins>&nbsp; if (isFunc == 1 &amp;&amp; *mangled.pos == 'F') {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>214</th><td class="r"><ins>&nbsp; &nbsp; mangled.pos++;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>215</th><td class="r"><ins>&nbsp; &nbsp; while (*mangled.pos != '\0' &amp;&amp; *mangled.pos != 'Z') {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>216</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (isFunc == 1) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>217</th><td class="r"><ins>&nbsp; &nbsp; isFunc++;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>218</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; } else {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>219</th><td class="r"><ins>&nbsp; &nbsp; append(&amp;output, &#34;, &#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>220</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>221</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (extracttypeinfo(&amp;output, &amp;mangled) &lt; 0) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>222</th><td class="r"><ins>&nbsp; &nbsp; xfree(output.str);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>223</th><td class="r"><ins>&nbsp; &nbsp; xfree(symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>224</th><td class="r"><ins>&nbsp; &nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>225</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>226</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>227</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>228</th><td class="r"><ins>&nbsp; append(&amp;output, &#34;)&#34;);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>229</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>230</th><td class="r"><ins>&nbsp; //Doesn't display the return type, but wouldn't be too hard to do.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>231</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>232</th><td class="r"><ins>&nbsp; append_len(&amp;output, &#34;&#34;, 1);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>233</th><td class="r"><ins>&nbsp; str_resize(&amp;output, 0);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>234</th><td class="r"><ins>&nbsp; //printf(&#34;%s\n&#34;, output.str);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>235</th><td class="r"><ins>&nbsp; xfree(symbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>236</th><td class="r"><ins>&nbsp; return output.str;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>237</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>238</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>239</th><td class="r"><ins>char* d_sym_demangle(const struct general_symbol_info *gsymbol) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>240</th><td class="r"><ins>&nbsp; return d_demangle(gsymbol-&gt;name, 0);</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>241</th><td class="r"><ins>}</ins>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/d-lang.h</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody class="add"><tr class="first"><th>&nbsp;</th><th>1</th><td class="r"><ins>/* C language support definitions for GDB, the GNU debugger.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2</th><td class="r"><ins>&nbsp; &nbsp;Copyright 1992, 1994, 1995, 1996, 1997, 1998, 2000, 2002</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>3</th><td class="r"><ins>&nbsp; &nbsp;Free Software Foundation, Inc.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>5</th><td class="r"><ins>&nbsp; &nbsp;This file is part of GDB.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>6</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>7</th><td class="r"><ins>&nbsp; &nbsp;This program is free software; you can redistribute it and/or modify</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>8</th><td class="r"><ins>&nbsp; &nbsp;it under the terms of the GNU General Public License as published by</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>9</th><td class="r"><ins>&nbsp; &nbsp;the Free Software Foundation; either version 2 of the License, or</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>10</th><td class="r"><ins>&nbsp; &nbsp;(at your option) any later version.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>11</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>12</th><td class="r"><ins>&nbsp; &nbsp;This program is distributed in the hope that it will be useful,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>13</th><td class="r"><ins>&nbsp; &nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>14</th><td class="r"><ins>&nbsp; &nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp; See the</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>15</th><td class="r"><ins>&nbsp; &nbsp;GNU General Public License for more details.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>16</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>17</th><td class="r"><ins>&nbsp; &nbsp;You should have received a copy of the GNU General Public License</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>18</th><td class="r"><ins>&nbsp; &nbsp;along with this program; if not, write to the Free Software</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>19</th><td class="r"><ins>&nbsp; &nbsp;Foundation, Inc., 59 Temple Place - Suite 330,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>20</th><td class="r"><ins>&nbsp; &nbsp;Boston, MA 02111-1307, USA.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>21</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>22</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>23</th><td class="r"><ins>#if !defined (D_LANG_H)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>24</th><td class="r"><ins>#define D_LANG_H 1</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>25</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>26</th><td class="r"><ins>#include &#34;symtab.h&#34;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>27</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>28</th><td class="r"><ins>/*****************************</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>29</th><td class="r"><ins>&nbsp;D Language stuff</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>30</th><td class="r"><ins>******************************/</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>31</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>32</th><td class="r"><ins>char* d_demangle(const char* mangled, int options);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>33</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>34</th><td class="r"><ins>char* d_sym_demangle(const struct general_symbol_info *gsymbol);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>35</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>36</th><td class="r"><ins></ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>37</th><td class="r"><ins>#endif /* !defined (D_LANG_H) */</ins>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/dwarf2read.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>6473</th><th>6473</th><td class="l"><span>&nbsp; &nbsp; case DW_LANG_C_plus_plus:</span>&nbsp;</td></tr><tr><th>6474</th><th>6474</th><td class="l"><span>&nbsp; &nbsp; &nbsp; cu-&gt;language = language_cplus;</span>&nbsp;</td></tr><tr><th>6475</th><th>6475</th><td class="l"><span>&nbsp; &nbsp; &nbsp; break;</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>6476</th><td class="r"><ins>&nbsp; &nbsp; case DW_LANG_D:</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>6477</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; cu-&gt;language = language_d;</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6478</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; break;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>6476</th><th>6479</th><td class="l"><span>&nbsp; &nbsp; case DW_LANG_Fortran77:</span>&nbsp;</td></tr><tr><th>6477</th><th>6480</th><td class="l"><span>&nbsp; &nbsp; case DW_LANG_Fortran90:</span>&nbsp;</td></tr><tr><th>6478</th><th>6481</th><td class="l"><span>&nbsp; &nbsp; case DW_LANG_Fortran95:</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>7004</th><th>7007</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else</span>&nbsp;</td></tr><tr><th>7005</th><th>7008</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>7006</th><th>7009</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fe = &amp;lh-&gt;file_names[file - 1];</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>7007</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (fe-&gt;dir_index<del></del>)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>7010</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (fe-&gt;dir_index<ins>&nbsp;&amp;&amp; lh-&gt;include_dirs != NULL</ins>)&nbsp;</td></tr></tbody><tbody><tr><th>7008</th><th>7011</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dir = lh-&gt;include_dirs[fe-&gt;dir_index - 1];</span>&nbsp;</td></tr><tr><th>7009</th><th>7012</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!decode_for_pst_p)</span>&nbsp;</td></tr><tr><th>7010</th><th>7013</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/language.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>539</th><th>539</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>540</th><th>540</th><td class="l"><span>&nbsp; &nbsp; case language_c:</span>&nbsp;</td></tr><tr><th>541</th><th>541</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>542</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>542</th><th>543</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>543</th><th>544</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (TYPE_CODE (t1) == TYPE_CODE_FLT)</span>&nbsp;</td></tr><tr><th>544</th><th>545</th><td class="l"><span>&nbsp; &nbsp; return TYPE_CODE (t2) == TYPE_CODE_FLT &amp;&amp; l2 &gt; l1 ?</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>650</th><th>651</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>651</th><th>652</th><td class="l"><span>&nbsp; &nbsp; case language_c:</span>&nbsp;</td></tr><tr><th>652</th><th>653</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>654</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>653</th><th>655</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>654</th><th>656</th><td class="l"><span>&nbsp; &nbsp; &nbsp; return (TYPE_CODE (type) != TYPE_CODE_INT) &amp;&amp;</span>&nbsp;</td></tr><tr><th>655</th><th>657</th><td class="l"><span>&nbsp; &nbsp; (TYPE_CODE (type) != TYPE_CODE_ENUM) ? 0 : 1;</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>690</th><th>692</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>691</th><th>693</th><td class="l"><span>&nbsp; &nbsp; case language_c:</span>&nbsp;</td></tr><tr><th>692</th><th>694</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>695</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>693</th><th>696</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>694</th><th>697</th><td class="l"><span>&nbsp; &nbsp; &nbsp; return (TYPE_CODE (type) == TYPE_CODE_INT) &amp;&amp;</span>&nbsp;</td></tr><tr><th>695</th><th>698</th><td class="l"><span>&nbsp; &nbsp; TYPE_LENGTH (type) == sizeof (char)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>712</th><th>715</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>713</th><th>716</th><td class="l"><span>&nbsp; &nbsp; case language_c:</span>&nbsp;</td></tr><tr><th>714</th><th>717</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>718</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>715</th><th>719</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>716</th><th>720</th><td class="l"><span>&nbsp; &nbsp; &nbsp; /* C does not have distinct string type. */</span>&nbsp;</td></tr><tr><th>717</th><th>721</th><td class="l"><span>&nbsp; &nbsp; &nbsp; return (0);</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>731</th><th>735</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>732</th><th>736</th><td class="l"><span>&nbsp; &nbsp; case language_c:</span>&nbsp;</td></tr><tr><th>733</th><th>737</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>738</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>734</th><th>739</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>735</th><th>740</th><td class="l"><span>&nbsp; &nbsp; &nbsp; /* Might be more cleanly handled by having a</span>&nbsp;</td></tr><tr><th>736</th><th>741</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TYPE_CODE_INT_NOT_BOOL for (the deleted) CHILL and such</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>804</th><th>809</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>805</th><th>810</th><td class="l"><span>&nbsp; &nbsp; &nbsp; return builtin_type_f_logical_s2;</span>&nbsp;</td></tr><tr><th>806</th><th>811</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>812</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>807</th><th>813</th><td class="l"><span>&nbsp; &nbsp; case language_pascal:</span>&nbsp;</td></tr><tr><th>808</th><th>814</th><td class="l"><span>&nbsp; &nbsp; case language_ada:</span>&nbsp;</td></tr><tr><th>809</th><th>815</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (current_language-&gt;la_language==language_cplus)</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/Makefile.in</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>595</th><th>595</th><td class="l"><span>&nbsp; &nbsp; c-exp.y c-lang.c c-typeprint.c c-valprint.c \</span>&nbsp;</td></tr><tr><th>596</th><th>596</th><td class="l"><span>&nbsp; &nbsp; charset.c cli-out.c coffread.c coff-pe-read.c \</span>&nbsp;</td></tr><tr><th>597</th><th>597</th><td class="l"><span>&nbsp; &nbsp; complaints.c completer.c corefile.c \</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>598</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; cp-abi.c cp-support.c cp-namespace.c cp-valprint.c <del></del>\&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>598</th><td class="r">&nbsp; &nbsp; cp-abi.c cp-support.c cp-namespace.c cp-valprint.c <ins>d-lang.c </ins>\&nbsp;</td></tr></tbody><tbody><tr><th>599</th><th>599</th><td class="l"><span>&nbsp; &nbsp; cp-name-parser.y \</span>&nbsp;</td></tr><tr><th>600</th><th>600</th><td class="l"><span>&nbsp; &nbsp; dbxread.c demangle.c dictionary.c disasm.c doublest.c dummy-frame.c \</span>&nbsp;</td></tr><tr><th>601</th><th>601</th><td class="l"><span>&nbsp; &nbsp; dwarf2expr.c dwarf2loc.c dwarf2read.c dwarf2-frame.c \</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>749</th><th>749</th><td class="l"><span>completer_h = completer.h</span>&nbsp;</td></tr><tr><th>750</th><th>750</th><td class="l"><span>cp_abi_h = cp-abi.h</span>&nbsp;</td></tr><tr><th>751</th><th>751</th><td class="l"><span>cp_support_h = cp-support.h $(symtab_h)</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>752</th><td class="r"><ins>d_lang_h = d-lang.h $(symtab_h)</ins>&nbsp;</td></tr></tbody><tbody><tr><th>752</th><th>753</th><td class="l"><span>dcache_h = dcache.h</span>&nbsp;</td></tr><tr><th>753</th><th>754</th><td class="l"><span>defs_h = defs.h $(config_h) $(ansidecl_h) $(gdb_locale_h) $(gdb_signals_h) \</span>&nbsp;</td></tr><tr><th>754</th><th>755</th><td class="l"><span>&nbsp; &nbsp; $(libiberty_h) $(bfd_h) $(ui_file_h) $(nm_h) \</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>1050</th><th>1051</th><td class="l"><span>&nbsp; &nbsp; dbxread.o coffread.o coff-pe-read.o \</span>&nbsp;</td></tr><tr><th>1051</th><th>1052</th><td class="l"><span>&nbsp; &nbsp; dwarf2read.o mipsread.o stabsread.o corefile.o \</span>&nbsp;</td></tr><tr><th>1052</th><th>1053</th><td class="l"><span>&nbsp; &nbsp; dwarf2expr.o dwarf2loc.o dwarf2-frame.o \</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>1053</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; ada-lang.o c-lang.o <del></del>f-lang.o objc-lang.o \&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>1054</th><td class="r">&nbsp; &nbsp; ada-lang.o c-lang.o <ins>d-lang.o </ins>f-lang.o objc-lang.o \&nbsp;</td></tr></tbody><tbody><tr><th>1054</th><th>1055</th><td class="l"><span>&nbsp; &nbsp; ui-out.o cli-out.o \</span>&nbsp;</td></tr><tr><th>1055</th><th>1056</th><td class="l"><span>&nbsp; &nbsp; varobj.o vec.o wrapper.o \</span>&nbsp;</td></tr><tr><th>1056</th><th>1057</th><td class="l"><span>&nbsp; &nbsp; jv-lang.o jv-valprint.o jv-typeprint.o \</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2026</th><th>2027</th><td class="l"><span>c-valprint.o: c-valprint.c $(defs_h) $(gdb_string_h) $(symtab_h) \</span>&nbsp;</td></tr><tr><th>2027</th><th>2028</th><td class="l"><span>&nbsp; &nbsp; $(gdbtypes_h) $(expression_h) $(value_h) $(valprint_h) $(language_h) \</span>&nbsp;</td></tr><tr><th>2028</th><th>2029</th><td class="l"><span>&nbsp; &nbsp; $(c_lang_h) $(cp_abi_h) $(target_h)</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>2030</th><td class="r"><ins>d-lang.o: d-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(expression_h) \</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2031</th><td class="r"><ins>&nbsp; &nbsp; $(parser_defs_h) $(language_h) $(c_lang_h) $(valprint_h) \</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2032</th><td class="r"><ins>&nbsp; &nbsp; $(macroscope_h) $(gdb_assert_h) $(charset_h) $(gdb_string_h)</ins>&nbsp;</td></tr></tbody><tbody><tr><th>2029</th><th>2033</th><td class="l"><span>dbug-rom.o: dbug-rom.c $(defs_h) $(gdbcore_h) $(target_h) $(monitor_h) \</span>&nbsp;</td></tr><tr><th>2030</th><th>2034</th><td class="l"><span>&nbsp; &nbsp; $(serial_h) $(regcache_h) $(m68k_tdep_h)</span>&nbsp;</td></tr><tr><th>2031</th><th>2035</th><td class="l"><span>dbxread.o: dbxread.c $(defs_h) $(gdb_string_h) $(gdb_obstack_h) \</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2860</th><th>2864</th><td class="l"><span>&nbsp; &nbsp; $(gdb_obstack_h) $(exceptions_h) $(language_h) $(bcache_h) \</span>&nbsp;</td></tr><tr><th>2861</th><th>2865</th><td class="l"><span>&nbsp; &nbsp; $(block_h) $(gdb_regex_h) $(gdb_stat_h) $(dictionary_h) \</span>&nbsp;</td></tr><tr><th>2862</th><th>2866</th><td class="l"><span>&nbsp; &nbsp; $(gdb_string_h) $(readline_h)</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2863</th><th>&nbsp;</th><td class="l">symtab.o: symtab.c $(defs_h) $(<del></del>symtab_h) $(gdbtypes_h) $(gdbcore_h) \&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2867</th><td class="r">symtab.o: symtab.c $(defs_h) $(<ins>d_lang_h) $(</ins>symtab_h) $(gdbtypes_h) $(gdbcore_h) \&nbsp;</td></tr></tbody><tbody><tr><th>2864</th><th>2868</th><td class="l"><span>&nbsp; &nbsp; $(frame_h) $(target_h) $(value_h) $(symfile_h) $(objfiles_h) \</span>&nbsp;</td></tr><tr><th>2865</th><th>2869</th><td class="l"><span>&nbsp; &nbsp; $(gdbcmd_h) $(call_cmds_h) $(gdb_regex_h) $(expression_h) \</span>&nbsp;</td></tr><tr><th>2866</th><th>2870</th><td class="l"><span>&nbsp; &nbsp; $(language_h) $(demangle_h) $(inferior_h) $(linespec_h) $(source_h) \</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/symfile.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>2672</th><th>2672</th><td class="l"><span>&nbsp; &nbsp; &nbsp; filename_language_table =</span>&nbsp;</td></tr><tr><th>2673</th><th>2673</th><td class="l"><span>&nbsp; &nbsp; xmalloc (fl_table_size * sizeof (*filename_language_table));</span>&nbsp;</td></tr><tr><th>2674</th><th>2674</th><td class="l"><span>&nbsp; &nbsp; &nbsp; add_filename_language (&#34;.c&#34;, language_c);</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>2675</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; add_filename_language (&#34;.d&#34;, language_d);</ins>&nbsp;</td></tr></tbody><tbody><tr><th>2675</th><th>2676</th><td class="l"><span>&nbsp; &nbsp; &nbsp; add_filename_language (&#34;.C&#34;, language_cplus);</span>&nbsp;</td></tr><tr><th>2676</th><th>2677</th><td class="l"><span>&nbsp; &nbsp; &nbsp; add_filename_language (&#34;.cc&#34;, language_cplus);</span>&nbsp;</td></tr><tr><th>2677</th><th>2678</th><td class="l"><span>&nbsp; &nbsp; &nbsp; add_filename_language (&#34;.cp&#34;, language_cplus);</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gdb-6.8/gdb/symtab.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>41</th><th>41</th><td class="l"><span>#include &#34;objc-lang.h&#34;</span>&nbsp;</td></tr><tr><th>42</th><th>42</th><td class="l"><span>#include &#34;ada-lang.h&#34;</span>&nbsp;</td></tr><tr><th>43</th><th>43</th><td class="l"><span>#include &#34;p-lang.h&#34;</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>44</th><td class="r"><ins>#include &#34;d-lang.h&#34;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>44</th><th>45</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>45</th><th>46</th><td class="l"><span>#include &#34;hashtab.h&#34;</span>&nbsp;</td></tr><tr><th>46</th><th>47</th><td class="l"><span></span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>394</th><th>395</th><td class="l"><span>{</span>&nbsp;</td></tr><tr><th>395</th><th>396</th><td class="l"><span>&nbsp; gsymbol-&gt;language = language;</span>&nbsp;</td></tr><tr><th>396</th><th>397</th><td class="l"><span>&nbsp; if (gsymbol-&gt;language == language_cplus</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>398</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_d</ins>&nbsp;</td></tr></tbody><tbody><tr><th>397</th><th>399</th><td class="l"><span>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_java</span>&nbsp;</td></tr><tr><th>398</th><th>400</th><td class="l"><span>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_objc)</span>&nbsp;</td></tr><tr><th>399</th><th>401</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>440</th><th>442</th><td class="l"><span>&nbsp; if (gsymbol-&gt;language == language_unknown)</span>&nbsp;</td></tr><tr><th>441</th><th>443</th><td class="l"><span>&nbsp; &nbsp; gsymbol-&gt;language = language_auto;</span>&nbsp;</td></tr><tr><th>442</th><th>444</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>445</th><td class="r"><ins>&nbsp; if (gsymbol-&gt;language == language_d</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>446</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_auto) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>447</th><td class="r"><ins>&nbsp; &nbsp; demangled = d_demangle(mangled, 0);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>448</th><td class="r"><ins>&nbsp; &nbsp; if (demangled != NULL) {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>449</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; gsymbol-&gt;language = language_d;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>450</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return demangled;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>451</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>452</th><td class="r"><ins>&nbsp; }</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>453</th><td class="r"><ins></ins>&nbsp;</td></tr></tbody><tbody><tr><th>443</th><th>454</th><td class="l"><span>&nbsp; if (gsymbol-&gt;language == language_objc</span>&nbsp;</td></tr><tr><th>444</th><th>455</th><td class="l"><span>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_auto)</span>&nbsp;</td></tr><tr><th>445</th><th>456</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>617</th><th>628</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>618</th><th>629</th><td class="l"><span>&nbsp; demangled = symbol_find_demangled_name (gsymbol, mangled);</span>&nbsp;</td></tr><tr><th>619</th><th>630</th><td class="l"><span>&nbsp; if (gsymbol-&gt;language == language_cplus</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>631</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_d</ins>&nbsp;</td></tr></tbody><tbody><tr><th>620</th><th>632</th><td class="l"><span>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_java</span>&nbsp;</td></tr><tr><th>621</th><th>633</th><td class="l"><span>&nbsp; &nbsp; &nbsp; || gsymbol-&gt;language == language_objc)</span>&nbsp;</td></tr><tr><th>622</th><th>634</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>646</th><th>658</th><td class="l"><span>&nbsp; switch (gsymbol-&gt;language) </span>&nbsp;</td></tr><tr><th>647</th><th>659</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>648</th><th>660</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>661</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>649</th><th>662</th><td class="l"><span>&nbsp; &nbsp; case language_java:</span>&nbsp;</td></tr><tr><th>650</th><th>663</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>651</th><th>664</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (gsymbol-&gt;language_specific.cplus_specific.demangled_name != NULL)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>671</th><th>684</th><td class="l"><span>&nbsp; switch (gsymbol-&gt;language) </span>&nbsp;</td></tr><tr><th>672</th><th>685</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>673</th><th>686</th><td class="l"><span>&nbsp; &nbsp; case language_cplus:</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>687</th><td class="r"><ins>&nbsp; &nbsp; case language_d:</ins>&nbsp;</td></tr></tbody><tbody><tr><th>674</th><th>688</th><td class="l"><span>&nbsp; &nbsp; case language_java:</span>&nbsp;</td></tr><tr><th>675</th><th>689</th><td class="l"><span>&nbsp; &nbsp; case language_objc:</span>&nbsp;</td></tr><tr><th>676</th><th>690</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (gsymbol-&gt;language_specific.cplus_specific.demangled_name != NULL)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>1100</th><th>1114</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>1101</th><th>1115</th><td class="l"><span>&nbsp; modified_name = name;</span>&nbsp;</td></tr><tr><th>1102</th><th>1116</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>1103</th><th>&nbsp;</th><td class="l">&nbsp; /* If we are using C++<del></del> or Java, demangle the name before doing a lookup, so&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>1117</th><td class="r">&nbsp; /* If we are using C++<ins>, D,</ins> or Java, demangle the name before doing a lookup, so&nbsp;</td></tr></tbody><tbody><tr><th>1104</th><th>1118</th><td class="l"><span>&nbsp; &nbsp; &nbsp;we can always binary search. */</span>&nbsp;</td></tr><tr><th>1105</th><th>1119</th><td class="l"><span>&nbsp; if (lang == language_cplus)</span>&nbsp;</td></tr><tr><th>1106</th><th>1120</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>1112</th><th>1126</th><td class="l"><span>&nbsp; &nbsp; &nbsp; needtofreename = 1;</span>&nbsp;</td></tr><tr><th>1113</th><th>1127</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>1114</th><th>1128</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>1129</th><td class="r"><ins>&nbsp; &nbsp; else if (current_language-&gt;la_language == language_d)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1130</th><td class="r"><ins>&nbsp; &nbsp; {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1131</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; demangled_name = d_demangle (name, 0);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1132</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (demangled_name)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1133</th><td class="r"><ins>&nbsp; &nbsp;{</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1134</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;mangled_name = name;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1135</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;modified_name = demangled_name;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1136</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;needtofreename = 1;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>1137</th><td class="r"><ins>&nbsp; &nbsp;}</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>1138</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr></tbody><tbody><tr><th>1115</th><th>1139</th><td class="l"><span>&nbsp; else if (lang == language_java)</span>&nbsp;</td></tr><tr><th>1116</th><th>1140</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>1117</th><th>1141</th><td class="l"><span>&nbsp; &nbsp; &nbsp; demangled_name = cplus_demangle (name, </span>&nbsp;</td></tr></tbody>
  </table>
 </li>
</ul></div>

  </div>

 <div id="help">
  <strong>Note:</strong> See <a href="/projects/gdb-patches/wiki/TracBrowser">TracBrowser</a> for help on using the browser.
 </div>

  <div id="anydiff">
   <form action="/projects/gdb-patches/anydiff" method="get">
    <div class="buttons">
     <input type="hidden" name="new_path" value="/downloads/gdb6.8/gdb-6.8-d-1.patch" />
     <input type="hidden" name="old_path" value="/downloads/gdb6.8/gdb-6.8-d-1.patch" />
     <input type="hidden" name="new_rev" value="" />
     <input type="hidden" name="old_rev" value="" />
     <input type="submit" value="View changes..." title="Prepare an Arbitrary Diff" />
    </div>
   </form>
  </div>

</div>
</div>
<script type="text/javascript">searchHighlight()</script>
<div id="altlinks"><h3>Download in other formats:</h3><ul><li class="first"><a href="/projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch?format=txt">Plain Text</a></li><li class="last"><a href="/projects/gdb-patches/browser/downloads/gdb6.8/gdb-6.8-d-1.patch?format=raw">Original Format</a></li></ul></div>

  </div>
 </div>
 
 <div id="sitefooter">
  <p class="left">&copy; Copyright 2004-2008 - The Sankaty Group, Inc.
   All rights reserved.</p>
  <p class="right">
   <a href="/site/donate">Make a Donation</a><br /><br />
   <a id="priv" href="/site/privacy">Privacy Statement</a>&nbsp;&nbsp;
   <a id="tos" href="/site/terms">Terms of Service</a>
  </p>
 </div>
</div>

 </body>
</html>

